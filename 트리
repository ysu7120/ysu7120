{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"트리","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOCvWLILt/Q+mmeXEJgZ8EM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"vysrZekCA3Gr"},"outputs":[],"source":["class Tree:\n","  def __init__(self, val = None):\n","    if val != None:\n","\t    self.val = val\n","    else:\n","        self.val = None\n","    self.left = None\n","    self.right = None\n","\n","  def insert(self, val):\n","    if self.val:\n","        if val < self.val:\n","            if self.left is None:\n","            \tself.left = Tree(val)\n","            else:\n","            \tself.left.insert(val)\n","        elif val > self.val:\n","        \t\tif self.right is None:\n","              self.right = Tree(val)\n","            else:\n","              self.right.insert(val)\n","    else:\n","        self.val = val\n","\n","  def printValues(self):\n","    if self.left:\n","        self.left.printValues()\n","    print(self.val)\n","    if self.right:\n","        self.right.printValues()\n","\n","tree = Tree(20)\n","tree.left = Tree(18)\n","tree.right = Tree(22)\n","tree.insert(19)\n","tree.insert(24)\n","tree.insert(5)\n","tree.insert(21)\n","\n","tree.printValues()"]}]}