{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DFS BFS","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP036S04v5MVKZCncpLW7pF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#스택예제\n","stack=[]\n","\n","stack.append(5)\n","stack.append(2)\n","stack.append(3)\n","stack.append(7)\n","stack.pop()\n","stack.append(1)\n","stack.append(4)\n","stack.pop()\n","\n","print(stack)\n","print(stack[::-1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lAUuxQXWEjDn","executionInfo":{"status":"ok","timestamp":1658831915077,"user_tz":-540,"elapsed":264,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"31e97e20-1cb5-4a06-981a-64d700ee1dea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[5, 2, 3, 1]\n","[1, 3, 2, 5]\n"]}]},{"cell_type":"code","source":["#큐예제\n","from collections import deque\n","\n","queue = deque()\n","\n","queue.append(5)\n","queue.append(2)\n","queue.append(3)\n","queue.append(7)\n","queue.popleft()\n","queue.append(1)\n","queue.append(4)\n","queue.popleft()\n","\n","print(queue)\n","queue.reverse()\n","print(queue)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y44a9o8NE6yr","executionInfo":{"status":"ok","timestamp":1658831911939,"user_tz":-540,"elapsed":267,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"aa4b60cc-360e-48db-ad21-d9240770cca9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["deque([3, 7, 1, 4])\n","deque([4, 1, 7, 3])\n"]}]},{"cell_type":"code","source":["#재귀함수\n","def recursive_function():\n","  print(\"재귀함수를 호출합니다\")\n","  recursive_function()\n","\n","recursive_function()"],"metadata":{"id":"eYp8pvbnFlZf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#재귀함수 종료조건\n","def recursive_function(i):\n","  if i == 100:\n","    return\n","    print(i,\"번째 재귀함수에서\", i+1, \"번째 재귀 함수를 호출합니다\")\n","    recursive_function(i+1)\n","    print(i,\"번째 재귀함수를 종료합니다\")\n","\n","recursive_function(1)"],"metadata":{"id":"bNfSkOveF-7a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#2가지방식으로 구현한 팩토리얼 예제\n","#반복적으로 구현한 n!\n","def factorial_iterative(n):\n","  result=1\n","  for i in range(1,n+1):\n","    result*=i\n","  return result\n","\n","def factorial_recursive(n):\n","  if n<=1:\n","    return 1\n","  return n*factorial_recursive(n-1)\n","\n","print(factorial_iterative(5))\n","print(factorial_recursive(5))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xrYGMje2GkiD","executionInfo":{"status":"ok","timestamp":1658832445786,"user_tz":-540,"elapsed":303,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"3fdb02c9-362e-4a72-cb5b-41445550f9d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["120\n","120\n"]}]},{"cell_type":"code","source":["#인접 행렬 방식\n","INF=999999999\n","graph=[\n","       [0,7,5],\n","       [7,0,INF],\n","       [5,INF,0],\n","]\n","print(graph)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rmmj3UrBHsyC","executionInfo":{"status":"ok","timestamp":1658832553183,"user_tz":-540,"elapsed":5,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"e37dea6b-0c5a-40ac-875e-3f55a046672a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0, 7, 5], [7, 0, 999999999], [5, 999999999, 0]]\n"]}]},{"cell_type":"code","source":["#인접 리스트 방식\n","graph=[[]for _ in range(3)]\n","\n","graph[0].append((1,7))\n","graph[0].append((2,5))\n","\n","graph[1].append((0,7))\n","graph[2].append((0,5))\n","\n","print(graph)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KTty71KTIAty","executionInfo":{"status":"ok","timestamp":1658832646966,"user_tz":-540,"elapsed":302,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"b52b37da-1665-4425-8741-7f20eb47b398"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[(1, 7), (2, 5)], [(0, 7)], [(0, 5)]]\n"]}]},{"cell_type":"code","source":["#DFS\n","def dfs(graph,v,visited):\n","  visited[v] = True\n","  print(v, end=' ')\n","  for i in graph[v]:\n","    if not visited[i]:\n","      dfs(graph, i , visited)\n","\n","graph=[\n","       [],\n","       [2,3,8],\n","       [1,7],\n","       [1,4,5],\n","       [3,5],\n","       [3,4],\n","       [7],\n","       [2,6,8],\n","       [1,7]\n","]\n","\n","visited=[False]*9\n","dfs(graph,1,visited)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EUjjOkfRIle6","executionInfo":{"status":"ok","timestamp":1658836895236,"user_tz":-540,"elapsed":292,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"859ee34c-1318-4b73-c935-ade4573bdb36"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 7 6 8 3 4 5 "]}]},{"cell_type":"code","source":["#bfs\n","from collections import deque\n","\n","def bfs(graph,start,visited):\n","  queue = deque([start])\n","  visited[start]=True\n","  while queue:\n","    v=queue.popleft()\n","    print(v,end=' ')\n","    for i in graph[v]:\n","      if not visited[i]:\n","        queue.append(i)\n","        visited[i]=True\n","\n","graph=[\n","       [],\n","       [2,3,8],\n","       [1,7],\n","       [1,4,5],\n","       [3,5],\n","       [3,4],\n","       [7],\n","       [2,6,8],\n","       [1,7]\n","]\n","\n","visited=[False]*9\n","bfs(graph,1,visited)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z9YGmJ5lYk6I","executionInfo":{"status":"ok","timestamp":1658837484300,"user_tz":-540,"elapsed":280,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"e9bbef62-f598-4eba-b6f2-648550e3be75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["deque([1])\n","1 2 3 8 7 4 5 6 "]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZVcTBA7gQjFm","executionInfo":{"status":"ok","timestamp":1658050867548,"user_tz":-540,"elapsed":12198,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"dc276528-b63e-47fb-f8f9-319e624caf7e"},"outputs":[{"output_type":"stream","name":"stdout","text":["4 5\n","00110\n","00011\n","11111\n","00000\n","3\n"]}],"source":["#음료수 얼려먹기\n","N,M=map(int,input().split())\n","array=[]\n","for i in range(N):\n","  array.append(list(map(int,input())))\n","\n","def dfs(x,y):\n","  if x <=-1 or x>=N or y<=-1 or y>=M:\n","    return False\n","  if array[x][y]==0:\n","    array[x][y]=1\n","    dfs(x-1,y)\n","    dfs(x,y-1)\n","    dfs(x+1,y)\n","    dfs(x,y+1)\n","    return True\n","  return False\n","\n","result=0\n","for i in range(N):\n","  for j in range(M):\n","    if dfs(i,j) == True:\n","      result+=1\n","\n","print(result)"]},{"cell_type":"code","source":["#미로탈출\n","from collections import deque\n","\n","N,M=map(int,input().split())\n","array=[]\n","for i in range(N):\n","  array.append(list(map(int,input())))\n","\n","dx=[-1,1,0,0]\n","dy=[0,0,-1,1]\n","def bfs(x,y):\n","  queue=deque()\n","  queue.append((x,y))\n","  while queue:\n","    x, y=queue.popleft()\n","    for i in range(4):\n","      nx=x+dx[i]\n","      ny=y+dy[i]\n","      if nx<0 or ny<0 or nx>= N or ny>=M:\n","        continue\n","      if array[nx][ny]==0:\n","        continue\n","      if array[nx][ny]==1:\n","        array[nx][ny]= array[x][y]+1\n","        queue.append((nx,ny))\n","  return array[N-1][M-1]\n","\n","print(bfs(0,0))"],"metadata":{"id":"WAlBxTkgZCvT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#특정 거리의 도시찾기#너비우선탐색#BFS\n","from collections import deque\n","n,m,k,x=map(int,input().split())\n","graph=[[]for _ in range(n+1)]\n","\n","for i in range(m):\n","  a,b=map(int,input().split())\n","  graph[a].append(b)\n","\n","distance=[-1]*(n+1)\n","distance[x]=0\n","  \n","q=deque([x])\n","while q:\n","  now=q.popleft()\n","  for next_node in graph[now]:\n","    if distance[next_node]==-1:\n","      distance[next_node]=distance[now]+1\n","      q.append(next_node)\n","\n","check=False\n","for i in range(1, n+1):\n","  if distance[i] == k:\n","    print(i)\n","    check=True\n","\n","if check==False:\n","  print(-1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9lPcK302ooyt","executionInfo":{"status":"ok","timestamp":1658491189828,"user_tz":-540,"elapsed":13974,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"3aeb61b6-832f-4d58-ad3c-9562f8640013"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4 4 2 1\n","1 2\n","1 3\n","2 3\n","2 4\n","4\n"]}]},{"cell_type":"code","source":["#연구소#dfs\n","n,m=map(int,input().split())\n","data=[]\n","temp=[[0]*m for _ in range(n)]\n","\n","for i in range(n):\n","  data.append(list(map(int,input().split())))\n","\n","dx=[-1,0,1,0]\n","dy=[0,1,0,-1]\n","\n","result=0\n","\n","def virus(x,y):\n","  for i in range(4):\n","    nx = x + dx[i]\n","    ny = y + dy[i]\n","    if nx>=0 and nx<n and ny>=0 and ny<m:\n","      if temp[nx][ny] == 0:\n","        temp[nx][ny]=2\n","        virus(nx,ny)\n","\n","def get_score():\n","  score=0\n","  for i in range(n):\n","    for j in range(m):\n","      if temp[i][j] == 0:\n","        score += 1\n","  return score\n","\n","def dfs(count):\n","  global result\n","  if count == 3:\n","    for i in range(n):\n","      for j in range(m):\n","        temp[i][j] = data[i][j]\n","    for i in range(n):\n","      for j in range(m):\n","        if temp[i][j] == 2:\n","          virus(i,j)\n","    result=max(result,get_score())\n","    return\n","\n","  for i in range(n):\n","    for j in range(m):\n","      if data[i][j]==0:\n","        data[i][j]=1\n","        count+=1\n","        dfs(count)\n","        data[i][j]=0\n","        count-=1\n","\n","dfs(0)\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xHFN9BO5yqhN","executionInfo":{"status":"ok","timestamp":1658493045419,"user_tz":-540,"elapsed":26757,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"cf63e24e-e650-476e-b0a7-d1422f909c3e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4 6\n","0 0 0 0 0 0\n","1 0 0 0 0 2\n","1 1 1 0 0 2\n","0 0 0 0 0 2\n","9\n"]}]},{"cell_type":"code","source":["#경쟁적전염#너비우선탐색#BFS\n","from collections import deque\n","\n","n,k=map(int,input().split())\n","graph=[]\n","data=[]\n","\n","for i in range(n):\n","  graph.append(list(map(int,input().split())))\n","  for j in range(n):\n","    if graph[i][j]!=0:\n","      data.append((graph[i][j],0,i,j))\n","\n","data.sort()\n","q=deque(data)\n","\n","dx=[-1,0,1,0]\n","dy=[0,1,0,-1]\n","\n","target_s, target_x, target_y=map(int,input().split())\n","\n","while q:\n","  virus, s, x, y=q.popleft()\n","  if s == target_s:\n","    break\n","  for i in range(4):\n","    nx = x + dx[i]\n","    ny = y + dy[i]\n","    if nx>=0 and nx<n and ny>=0 and ny<n:\n","      if graph[nx][ny] == 0:\n","        graph[nx][ny]=virus\n","        q.append((virus, s+1, nx, ny))\n","\n","print(graph[target_x-1][target_y-1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PgHThPR946XN","executionInfo":{"status":"ok","timestamp":1658497996179,"user_tz":-540,"elapsed":14822,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"7f243fd7-ea88-4e9a-87c2-49e27526c08a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3 3\n","1 0 2\n","0 0 0\n","3 0 0\n","2 3 2\n","3\n"]}]},{"cell_type":"code","source":["#괄호변환\n","\n","def balanced_index(p):\n","  count = 0\n","  for i in range(len(p)):\n","    if p[i]=='(':\n","      count+=1\n","    else:\n","      count-=1\n","    if count==0:\n","      return i\n","\n","def check_proper(p):\n","  count=0\n","  for i in p:\n","    if i == '(':\n","      count+=1\n","    else:\n","      if count==0:\n","        return False\n","      count-=1\n","  return True\n","\n","def solution(p):\n","  answer=''\n","  if p == '':\n","    return answer\n","  index = balanced_index(p)\n","  u=p[:index + 1]\n","  v=p[index + 1:]\n","  if check_proper(u):\n","    answer = u + solution(v)\n","  else:\n","    answer = '('\n","    answer += solution(v)\n","    answer = ')'\n","    u= list(u[1:-1])\n","    for i in range(len(u)):\n","      if u[i] == '(':\n","        u[i] = ')'\n","      else: \n","        u[i] = '('\n","    answer += \"\".join(u)\n","    \n","  return answer"],"metadata":{"id":"Ps8J1z4TLEMt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#연산자 끼워 넣기#dfs\n","n=int(input())\n","data=list(map(int,input().split()))\n","\n","add,sub,mul,div =map(int,input().split())\n","min_value = 1e9\n","max_value = -1e9\n","\n","def dfs(i,now):\n","  global min_value, max_value,add,sub,mul,div\n","  if i == n:\n","    min_value = min(min_value, now)\n","    max_value = max(max_value, now)\n","  else:\n","    if add > 0:\n","      add -= 1\n","      dfs(i+1,now+data[i])\n","      add+=1\n","    if sub > 0:\n","      sub -= 1\n","      dfs(i+1,now-data[i])\n","      sub+=1\n","    if mul > 0:\n","      mul -= 1\n","      dfs(i+1,now*data[i])\n","      mul+=1\n","    if div > 0:\n","      div -= 1\n","      dfs(i+1,int(now/data[i]))\n","      div += 1\n","\n","dfs(1,data[0])\n","\n","print(max_value)\n","print(min_value)"],"metadata":{"id":"Z_wDW__GUWwW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658559735688,"user_tz":-540,"elapsed":12836,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"e7edb717-89ac-4c18-fd9a-34d9e057d0f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n","5 6\n","0 0 1 0\n","30\n","30\n"]}]},{"cell_type":"code","source":["#감시 피하기\n","from itertools import combinations\n","\n","n=int(input())\n","board = []\n","teachers = []\n","speces = []\n","\n","for i in range(n):\n","  board.append(list(input().split()))\n","  for j in range(n):\n","    if board[i][j] == 'T':\n","      teachers.append((i,j))\n","    if board[i][j] == 'X':\n","      speces.append((i,j))\n","\n","\n","def watch(x,y,direction):\n","  if direction == 0:\n","    while y >= 0:\n","      if board[i][j] == 'S':\n","        return True\n","      if board[i][j] == 'O':\n","        return False\n","      y -= 1\n","  if direction == 1:\n","    while y < n:\n","      if board[i][j] == 'S':\n","        return True\n","      if board[i][j] == 'O':\n","        return False\n","      y += 1\n","  if direction == 2:\n","    while x >= n:\n","      if board[i][j] == 'S':\n","        return True\n","      if board[i][j] == 'O':\n","        return False\n","      x -= 1\n","  if direction == 3:\n","    while x < n:\n","      if board[i][j] == 'S':\n","        return True\n","      if board[i][j] == 'O':\n","        return False\n","      x += 1\n","  return False\n","\n","def process():\n","  for x, y in teachers:\n","    for i in range(4):\n","      if watch(x, y, i):\n","        return True\n","  return False\n","\n","find = False\n","\n","for data in combinations(speces, 3):\n","  for x, y in data:\n","    board[x][y]='0'\n","  if not process():\n","    find = True\n","    break\n","  for x, y in data:\n","    board[x][y]='X'\n","\n","if find:\n","  print('YES')\n","else:\n","  print('NO')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ovPl0QWtifeG","executionInfo":{"status":"ok","timestamp":1658564562616,"user_tz":-540,"elapsed":34823,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"eefb7297-b225-4c66-8423-38c3265301c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","X S X X T\n","T X S X X\n","X X X X X\n","X T X X X\n","X X T X X\n","YES\n"]}]},{"cell_type":"code","source":["#인구이동#bfs\n","from collections import deque\n","\n","n,l,r=map(int,input().split())\n","graph=[]\n","for _ in range(n):\n","  graph.append(list(map(int,input().split())))\n","\n","dx=[-1,0,1,0]\n","dy=[0,-1,0,1]\n","\n","result=0\n","\n","def process(x, y, index):\n","  united=[]\n","  united.append((x,y))\n","  q=deque()\n","  q.append((x,y))\n","  union[x][y]=index\n","  summary=graph[x][y]\n","  count=1\n","  while q:\n","    x, y=q.popleft()\n","    for i in range(4):\n","      nx = x + dx[i]\n","      ny = y + dy[i]\n","      if n>nx>=0 and n>ny>=0 and union[nx][ny]==-1:\n","        if l<=abs(graph[nx][ny]-graph[x][y]) <= r:\n","          q.append((nx,ny))\n","          union[nx][ny]=index\n","          summary=graph[nx][ny]\n","          count+=1\n","          united.append((nx,ny))\n","  for i, j in united:\n","    graph[i][j] = summary//count\n","  return count\n","\n","total_count=0\n","while True:\n","  union=[[-1]*n for _ in range(n)]\n","  index = 0\n","  for i in range(n):\n","    for j in range(n):\n","      if union[i][j]==-1:\n","        process(i, j, index)\n","        index += 1\n","  if index == n*n:\n","    break\n","  total_count += 1\n","\n","print(total_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y47d0Yr2JfZ-","executionInfo":{"status":"ok","timestamp":1658566074746,"user_tz":-540,"elapsed":11531,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"701be4d8-9fea-44eb-be62-40c1367a63a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2 20 50\n","50 30\n","20 40\n","1\n"]}]},{"cell_type":"code","source":["#블록 이동하기\n","from collections import deque\n","\n","def get_next_pos(pos, board):\n","  next_pos = []\n","  pos=list(pos)\n","  pos1_x,pos1_y,pos2_x,pos2_y=pos[0][0],pos[0][1],pos[1][0],pos[1][1]\n","\n","  dx=[-1,0,1,0]\n","  dy=[0,-1,0,1]\n","  for i in range(4):\n","    pos1_next_x,pos1_next_y,pos2_next_x,pos2_next_y = pos1_x+dx[i],pos1_y+dy[i],pos2_x+dx[i],pos2_y+dy[i]\n","    if board[pos1_next_x][pos1_next_y]== 0 and board[pos2_next_x][pos2_next_y]== 0:\n","      next_pos.append({(pos1_next_x, pos1_next_y),(pos2_next_x, pos2_next_y)})\n","  if pos1_x == pos2_x:\n","    for i in [-1,1]:\n","      if board[pos1_x+i][pos1_y]== 0 and board[pos2_x+i][pos2_y]== 0:\n","        next_pos.append({(pos1_x, pos1_y),(pos1_x+i, pos1_y)})\n","        next_pos.append({(pos2_x, pos2_y),(pos2_x+i, pos2_y)})\n","  elif pos1_y == pos2_y:\n","    for i in [-1,1]:\n","      if board[pos1_x][pos1_y+i]== 0 and board[pos2_x][pos2_y+i]== 0:\n","        next_pos.append({(pos1_x, pos1_y),(pos1_x, pos1_y+i)})\n","        next_pos.append({(pos2_x, pos2_y),(pos2_x, pos2_y+i)}) \n","  return next_pos\n","\n","def solution(board):\n","  n=len(board)\n","  new_board=[[1]*(n+2)for _ in range(n+2)]\n","  for i in range(n):\n","    for j in range(n):\n","      new_board[i+1][j+1]=board[i][j]\n","  q=deque()\n","  visited=[]\n","  pos={(1,1),(1,2)}\n","  q.append((pos,0))\n","  visited.append(pos)\n","  while q:\n","    pos, cost=q.popleft()\n","    if (n,n) in pos:\n","      return cost\n","    for next_pos in get_next_pos(pos,new_board):\n","      if next_pos not in visited:\n","        q.append((next_pos,cost+1))\n","        visited.append(next_pos)\n","  return 0"],"metadata":{"id":"p1wIrO-pPf-6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["n,m=map(int,input().split())\n","graph=[]\n","for i in range(n):\n","  graph.append(list(map(int,input())))\n","\n","def dfs(x,y):\n","  if x<=-1 or x>=n or y<=-1 or y>=m:\n","    return False\n","  if graph[x][y]==0:\n","     graph[x][y]=1\n","     dfs(x-1,y)\n","     dfs(x+1,y)\n","     dfs(x,y-1)\n","     dfs(x,y+1)\n","     return True\n","  return False\n","\n","result=0\n","for i in range(n):\n","  for j in range(m):\n","    if dfs(i,j)==True:\n","      result+=1\n","\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GFeCB-ica4oY","executionInfo":{"status":"ok","timestamp":1658839218587,"user_tz":-540,"elapsed":14860,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"7b48e1f4-fb80-4aaa-beb9-24656df2c20e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4 5\n","00110\n","00011\n","11111\n","00000\n","3\n"]}]},{"cell_type":"code","source":["from collections import deque\n","\n","def bfs(x,y):\n","  queue = deque()\n","  queue.append((x,y))\n","  while queue:\n","    x,y=queue.popleft()\n","    for i in range(4):\n","      nx=x+dx[i]\n","      ny=y+dy[i]\n","      if nx<0 or nx>=n or ny<0 or ny>=m:\n","        continue\n","      if graph[nx][ny]==0:\n","        continue\n","      if graph[nx][ny]==1:\n","        graph[nx][ny]=graph[x][y]+1\n","        queue.append((nx,ny))\n","  return graph[n-1][m-1]\n","\n","n,m=map(int,input().split())\n","graph=[]\n","for i in range(n):\n","  graph.append(list(map(int,input())))\n","\n","dx=[-1,1,0,0]\n","dy=[0,0,-1,1]\n","\n","print(bfs(0,0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DBNrQ82Uherf","executionInfo":{"status":"ok","timestamp":1658840553969,"user_tz":-540,"elapsed":16157,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"4decdbba-612d-43b2-97e2-58cec54e3ffe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5 6\n","101010\n","111111\n","000001\n","111111\n","111111\n","10\n"]}]},{"cell_type":"code","source":["from collections import deque\n","#도시의 개수, 간선, 거리정보, 출발지점\n","n,m,k,x=map(int,input().split())\n","data=[[]for i in range(n+1)] #간선정보 저장\n","\n","# 이동방항 입력\n","for i in range(m):\n","  a,b=map(int,input().split())\n","  data[a].append(b)\n","\n","distance=[-1]*(n+1) # 가지 않은 간선 거리 -1로 저장\n","distance[x]=0 #시작지점은 0\n","\n","#q생성, 시작지점부터 저장\n","q=deque([x])\n","while q:\n","  now=q.popleft() # 현재위치\n","  # 현재위치부터 너비탐색시작\n","  for i in data[now]:\n","    if distance[i]==-1: #아직 가지않은 간선이라면\n","      distance[i]=distance[now]+1 #현재지점부터 +1(모든간선의 길이는 1로 정의하였음)\n","      q.append(i)\n","\n","check=False #k값을 가지는 거리가 없을경우\n","for j in range(1,n+1): #1~n까지 거리가 k인 지점찾기\n","  if distance[j]==k:\n","    print(j)\n","    check=True #k값을 가지는 거리가 있으므로 True\n","\n","if check==False:\n","  print(-1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3dmqz-mHn_db","executionInfo":{"status":"ok","timestamp":1660217489195,"user_tz":-540,"elapsed":9142,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"8a597da2-4dff-4baf-dd6e-b54216ccd9b3"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["4 3 2 1\n","1 2\n","1 3\n","1 4\n","-1\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"rWs_WnIHrDfY"},"execution_count":null,"outputs":[]}]}