{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"mount_file_id":"1d7hWLJa1z7pHxHW8Do4sd2WqETQ2XzP2","authorship_tag":"ABX9TyNdEGhtL2wxEAUeZNVXGHj9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"id":"dft327h1Vlzk","executionInfo":{"status":"ok","timestamp":1667475860381,"user_tz":-540,"elapsed":3,"user":{"displayName":"유성운","userId":"04010736311021015655"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import os\n","import cv2\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from PIL import Image\n","import glob\n","from keras.layers import Dense\n","from keras.models import Sequential, load_model\n","from sklearn.model_selection import train_test_split\n","from keras.models import Sequential\n","from keras.layers import Dropout, Activation, Dense\n","from keras.layers import Flatten, Conv2D, MaxPool2D\n","import h5py, os\n","import numpy as np\n","import cv2\n","from tensorflow.keras.utils import to_categorical"]},{"cell_type":"code","source":["dir_ = Path('/content/drive/MyDrive/dataset')\n","filepaths = list(dir_.glob(r'**/*.jpg'))\n","def proc_img(filepath):\n","    \"\"\"\n","   \t\t이미지데이터의 경로와 label데이터로 데이터프레임 만들기 \n","    \"\"\"\n","\n","    labels = [str(filepath[i]).split(\"/\")[-2] \\\n","              for i in range(len(filepath))]\n","\n","    filepath = pd.Series(filepath, name='Filepath').astype(str)\n","    labels = pd.Series(labels, name='Label')\n","\n","    # 경로와 라벨 concatenate\n","    df = pd.concat([filepath, labels], axis=1)\n","\n","    # index 재설정\n","    df = df.sample(frac=1,random_state=0).reset_index(drop = True)\n","    \n","    return df\n","\n","df = proc_img(filepaths)\n","df.head(1)"],"metadata":{"id":"PYH7ZvNhae_a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_dir = \"/content/drive/MyDrive/dataset\"\n","categories = [\"bright green avocado\", \"brown avocado\"]\n","num_classes = len(categories)\n","\n","# 이미지의 크기\n","image_w = 128\n","image_h = 128\n","\n","# 펼치기 \n","pixels = image_h * image_w * 3\n","\n","X = []\n","y = []\n","\n","for idx, category in enumerate(categories):\n","    \n","    #one-hot 돌리기.\n","    label = [0 for i in range(num_classes)]\n","    label[idx] = 1\n","\n","    image_dir = data_dir + \"/\" + category\n","    files = glob.glob(image_dir+\"/*.jpg\")\n","    print(category, \" 파일 길이 : \", len(files))\n","    for i, f in enumerate(files):\n","        img = Image.open(f)\n","        img = img.convert(\"RGB\")\n","        img = img.resize((image_w, image_h))\n","        data = np.asarray(img)\n","\n","        X.append(data)\n","        y.append(label)\n","\n","        if i % 700 == 0:\n","            print(category, \" : \", f)\n","\n","X = np.array(X)\n","y = np.array(y)\n","#1 0  이면 man\n","#0 1  이면 woman 이런식\n","\n","X_train , X_test , y_train , y_test = train_test_split(X, y, test_size=0.2)\n","xy = (X_train, X_test, y_train, y_test)\n","np.save(\"/content/drive/MyDrive/dataset/obj.npy\", xy)\n","\n","print(\"ok\", len(y))\n","nb_classes = len(categories)\n","\n","X_train, X_test, Y_train, Y_test = np.load(\"/content/drive/MyDrive/dataset/obj.npy\",allow_pickle=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w9ZOrw6MVqHp","executionInfo":{"status":"ok","timestamp":1667475880047,"user_tz":-540,"elapsed":15943,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"28d66fce-207a-4167-dbac-ce5f87398037"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["bright green avocado  파일 길이 :  1981\n","bright green avocado  :  /content/drive/MyDrive/dataset/bright green avocado/green avocado286.jpg\n","bright green avocado  :  /content/drive/MyDrive/dataset/bright green avocado/florida green avocado288.jpg\n","bright green avocado  :  /content/drive/MyDrive/dataset/bright green avocado/bright green avocado403.jpg\n","brown avocado  파일 길이 :  1746\n","brown avocado  :  /content/drive/MyDrive/dataset/brown avocado/ripe avocado508.jpg\n","brown avocado  :  /content/drive/MyDrive/dataset/brown avocado/black single avocado41.jpg\n","brown avocado  :  /content/drive/MyDrive/dataset/brown avocado/ripe avocado131.jpg\n","ok 3727\n"]}]},{"cell_type":"code","source":["X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32') / 255\n","X_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32') / 255 \n","y_train = to_categorical(y_train) \n","y_test = to_categorical(y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":229},"id":"OjWOh6Y0Jllh","executionInfo":{"status":"error","timestamp":1667474993532,"user_tz":-540,"elapsed":957,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"c6d9e607-8dbc-4a86-ae0b-0f06478b66bb"},"execution_count":5,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-a6a0bb0bc340>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m28\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m28\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'float32'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m255\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m28\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m28\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'float32'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m255\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_categorical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_categorical\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: cannot reshape array of size 146522112 into shape (2981,28,28,1)"]}]},{"cell_type":"code","source":["#######vgg16 레이어 변경필요##########\n","nb_classes = len(categories)\n","\n","model = Sequential()\n","model.add(Conv2D(input_shape=X_train.shape[1:],filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=256, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(Conv2D(filters=512, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n","model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n","model.add(Flatten())\n","model.add(Dense(units=4096,activation=\"relu\"))\n","model.add(Dense(units=4096,activation=\"relu\"))\n","model.add(Dense(units=2, activation=\"sigmoid\"))\n","model.summary()\n","\n","model.compile(optimizer =  tf.keras.optimizers.Adam(0.0005), \n","              loss=\"binary_crossentropy\", \n","              metrics = ['accuracy'])\n","history=model.fit(X_train, Y_train, epochs=50, batch_size=60)\n","score = model.evaluate(X_test, Y_test)\n","print('loss==>' ,score[0])\n","print('accuracy==>', score[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q7X4LDMlVvUJ","executionInfo":{"status":"ok","timestamp":1666964230671,"user_tz":-540,"elapsed":734360,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"d17ace28-8afe-429c-f29e-d4715e8a923e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 128, 128, 64)      1792      \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 128, 128, 64)      36928     \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 64, 64, 64)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 64, 64, 128)       73856     \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 64, 64, 128)       147584    \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 32, 32, 128)      0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 32, 32, 256)       295168    \n","                                                                 \n"," conv2d_5 (Conv2D)           (None, 32, 32, 256)       590080    \n","                                                                 \n"," conv2d_6 (Conv2D)           (None, 32, 32, 256)       590080    \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 16, 16, 256)      0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_7 (Conv2D)           (None, 16, 16, 512)       1180160   \n","                                                                 \n"," conv2d_8 (Conv2D)           (None, 16, 16, 512)       2359808   \n","                                                                 \n"," conv2d_9 (Conv2D)           (None, 16, 16, 512)       2359808   \n","                                                                 \n"," max_pooling2d_3 (MaxPooling  (None, 8, 8, 512)        0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_10 (Conv2D)          (None, 8, 8, 512)         2359808   \n","                                                                 \n"," conv2d_11 (Conv2D)          (None, 8, 8, 512)         2359808   \n","                                                                 \n"," conv2d_12 (Conv2D)          (None, 8, 8, 512)         2359808   \n","                                                                 \n"," max_pooling2d_4 (MaxPooling  (None, 4, 4, 512)        0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 8192)              0         \n","                                                                 \n"," dense (Dense)               (None, 4096)              33558528  \n","                                                                 \n"," dense_1 (Dense)             (None, 4096)              16781312  \n","                                                                 \n"," dense_2 (Dense)             (None, 2)                 8194      \n","                                                                 \n","=================================================================\n","Total params: 65,062,722\n","Trainable params: 65,062,722\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/50\n","54/54 [==============================] - 30s 301ms/step - loss: 1.2642 - accuracy: 0.4959\n","Epoch 2/50\n","54/54 [==============================] - 14s 255ms/step - loss: 0.6934 - accuracy: 0.4944\n","Epoch 3/50\n","54/54 [==============================] - 14s 259ms/step - loss: 0.6938 - accuracy: 0.5141\n","Epoch 4/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6938 - accuracy: 0.5047\n","Epoch 5/50\n","54/54 [==============================] - 14s 267ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 6/50\n","54/54 [==============================] - 15s 269ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 7/50\n","54/54 [==============================] - 14s 266ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 8/50\n","54/54 [==============================] - 14s 263ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 9/50\n","54/54 [==============================] - 14s 263ms/step - loss: 0.6937 - accuracy: 0.5031\n","Epoch 10/50\n","54/54 [==============================] - 14s 263ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 11/50\n","54/54 [==============================] - 14s 265ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 12/50\n","54/54 [==============================] - 14s 266ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 13/50\n","54/54 [==============================] - 14s 265ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 14/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 15/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 16/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 17/50\n","54/54 [==============================] - 14s 265ms/step - loss: 0.6941 - accuracy: 0.5047\n","Epoch 18/50\n","54/54 [==============================] - 14s 266ms/step - loss: 0.6932 - accuracy: 0.5016\n","Epoch 19/50\n","54/54 [==============================] - 14s 265ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 20/50\n","54/54 [==============================] - 14s 265ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 21/50\n","54/54 [==============================] - 14s 265ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 22/50\n","54/54 [==============================] - 14s 265ms/step - loss: 0.6932 - accuracy: 0.5022\n","Epoch 23/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 24/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 25/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 26/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 27/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 28/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 29/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 30/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6932 - accuracy: 0.5050\n","Epoch 31/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 32/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 33/50\n","54/54 [==============================] - 14s 263ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 34/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 35/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6933 - accuracy: 0.5047\n","Epoch 36/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 37/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6932 - accuracy: 0.5047\n","Epoch 38/50\n","54/54 [==============================] - 14s 264ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 39/50\n","54/54 [==============================] - 14s 263ms/step - loss: 1.3007 - accuracy: 0.4994\n","Epoch 40/50\n","54/54 [==============================] - 14s 262ms/step - loss: 0.9789 - accuracy: 0.4922\n","Epoch 41/50\n","54/54 [==============================] - 14s 262ms/step - loss: 0.7038 - accuracy: 0.5084\n","Epoch 42/50\n","54/54 [==============================] - 14s 262ms/step - loss: 0.6962 - accuracy: 0.5063\n","Epoch 43/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6937 - accuracy: 0.5028\n","Epoch 44/50\n","54/54 [==============================] - 14s 260ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 45/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 46/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 47/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 48/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6933 - accuracy: 0.5047\n","Epoch 49/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6931 - accuracy: 0.5047\n","Epoch 50/50\n","54/54 [==============================] - 14s 261ms/step - loss: 0.6931 - accuracy: 0.5047\n","25/25 [==============================] - 3s 51ms/step - loss: 0.6936 - accuracy: 0.4812\n","loss==> 0.6935798525810242\n","accuracy==> 0.48124998807907104\n"]}]},{"cell_type":"code","source":["# 6 훈련 과정 시각화 (정확도)\n","plt.plot(history.history['accuracy'])\n","plt.title('Model accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()\n","\n","# 7 훈련 과정 시각화 (손실)\n","plt.plot(history.history['loss'])\n","plt.title('Model loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"yLof5Olac0G6","executionInfo":{"status":"ok","timestamp":1666964355149,"user_tz":-540,"elapsed":1052,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"9a704059-8ac2-425e-fda3-9a8f79980d5f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from keras.applications import VGG16\n","from keras import Input\n","from keras.models import Model\n","from keras import layers, models\n","from keras import regularizers\n","from keras import optimizers, initializers, regularizers, metrics\n","\n","\n","input_tensor = Input(shape=X_train.shape[1:], dtype='float32', name='input')\n","\n","#vgg16 모델 불러오기\n","pre_trained_vgg = VGG16(weights='imagenet', include_top=False, input_shape=X_train.shape[1:])\n","pre_trained_vgg.trainable = False\n","pre_trained_vgg.summary()\n","\n","#vgg16 밑에 레이어 추가\n","additional_model = models.Sequential()\n","additional_model.add(pre_trained_vgg)\n","additional_model.add(layers.Flatten())\n","#additional_model.add(layers.Dense(4096, kernel_regularizer = regularizers.l1_l2\n","#                                  (l1=0.001,l2=0.001),activation='relu'))\n","#additional_model.add(layers.Dropout(0.5))\n","#additional_model.add(layers.Dense(2048, kernel_regularizer = regularizers.l1_l2\n","#                                  (l1=0.001,l2=0.001),activation='relu'))\n","#additional_model.add(layers.Dropout(0.5))\n","#additional_model.add(layers.Dense(1024, kernel_regularizer = regularizers.l1_l2\n","#                                  (l1=0.001,l2=0.001),activation='relu'))\n","additional_model.add(layers.Dropout(0.5))\n","additional_model.add(layers.Dense(1, activation='sigmoid'))\n","\n","additional_model.compile(loss='binary_crossentropy',\n","              optimizer= tf.keras.optimizers.Adam(0.0005),\n","              metrics=['acc'])"],"metadata":{"id":"lScSoY64c0qF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1667460063108,"user_tz":-540,"elapsed":369,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"402a0b71-529f-4a4a-8eed-acba80f71266"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"vgg16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 128, 128, 3)]     0         \n","                                                                 \n"," block1_conv1 (Conv2D)       (None, 128, 128, 64)      1792      \n","                                                                 \n"," block1_conv2 (Conv2D)       (None, 128, 128, 64)      36928     \n","                                                                 \n"," block1_pool (MaxPooling2D)  (None, 64, 64, 64)        0         \n","                                                                 \n"," block2_conv1 (Conv2D)       (None, 64, 64, 128)       73856     \n","                                                                 \n"," block2_conv2 (Conv2D)       (None, 64, 64, 128)       147584    \n","                                                                 \n"," block2_pool (MaxPooling2D)  (None, 32, 32, 128)       0         \n","                                                                 \n"," block3_conv1 (Conv2D)       (None, 32, 32, 256)       295168    \n","                                                                 \n"," block3_conv2 (Conv2D)       (None, 32, 32, 256)       590080    \n","                                                                 \n"," block3_conv3 (Conv2D)       (None, 32, 32, 256)       590080    \n","                                                                 \n"," block3_pool (MaxPooling2D)  (None, 16, 16, 256)       0         \n","                                                                 \n"," block4_conv1 (Conv2D)       (None, 16, 16, 512)       1180160   \n","                                                                 \n"," block4_conv2 (Conv2D)       (None, 16, 16, 512)       2359808   \n","                                                                 \n"," block4_conv3 (Conv2D)       (None, 16, 16, 512)       2359808   \n","                                                                 \n"," block4_pool (MaxPooling2D)  (None, 8, 8, 512)         0         \n","                                                                 \n"," block5_conv1 (Conv2D)       (None, 8, 8, 512)         2359808   \n","                                                                 \n"," block5_conv2 (Conv2D)       (None, 8, 8, 512)         2359808   \n","                                                                 \n"," block5_conv3 (Conv2D)       (None, 8, 8, 512)         2359808   \n","                                                                 \n"," block5_pool (MaxPooling2D)  (None, 4, 4, 512)         0         \n","                                                                 \n","=================================================================\n","Total params: 14,714,688\n","Trainable params: 0\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["print(X_train.shape[1:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f1OvaG0pXxB2","executionInfo":{"status":"ok","timestamp":1667460182337,"user_tz":-540,"elapsed":986,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"8c20bbd9-b9fb-46a8-e95f-1a8b7c5e674e"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["(128, 128, 3)\n"]}]},{"cell_type":"code","source":["###VGG16모델####\n","from keras.applications import VGG16\n","\n","transfer_model=VGG16(weights='imagenet', include_top=False, input_shape=X_train.shape[1:])\n","transfer_model.trainable = False\n","transfer_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DTExhY7TXkwi","executionInfo":{"status":"ok","timestamp":1667475904640,"user_tz":-540,"elapsed":8350,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"9d8af865-08b2-4858-ee8d-fae9ff1ae1f6"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58889256/58889256 [==============================] - 3s 0us/step\n","Model: \"vgg16\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 128, 128, 3)]     0         \n","                                                                 \n"," block1_conv1 (Conv2D)       (None, 128, 128, 64)      1792      \n","                                                                 \n"," block1_conv2 (Conv2D)       (None, 128, 128, 64)      36928     \n","                                                                 \n"," block1_pool (MaxPooling2D)  (None, 64, 64, 64)        0         \n","                                                                 \n"," block2_conv1 (Conv2D)       (None, 64, 64, 128)       73856     \n","                                                                 \n"," block2_conv2 (Conv2D)       (None, 64, 64, 128)       147584    \n","                                                                 \n"," block2_pool (MaxPooling2D)  (None, 32, 32, 128)       0         \n","                                                                 \n"," block3_conv1 (Conv2D)       (None, 32, 32, 256)       295168    \n","                                                                 \n"," block3_conv2 (Conv2D)       (None, 32, 32, 256)       590080    \n","                                                                 \n"," block3_conv3 (Conv2D)       (None, 32, 32, 256)       590080    \n","                                                                 \n"," block3_pool (MaxPooling2D)  (None, 16, 16, 256)       0         \n","                                                                 \n"," block4_conv1 (Conv2D)       (None, 16, 16, 512)       1180160   \n","                                                                 \n"," block4_conv2 (Conv2D)       (None, 16, 16, 512)       2359808   \n","                                                                 \n"," block4_conv3 (Conv2D)       (None, 16, 16, 512)       2359808   \n","                                                                 \n"," block4_pool (MaxPooling2D)  (None, 8, 8, 512)         0         \n","                                                                 \n"," block5_conv1 (Conv2D)       (None, 8, 8, 512)         2359808   \n","                                                                 \n"," block5_conv2 (Conv2D)       (None, 8, 8, 512)         2359808   \n","                                                                 \n"," block5_conv3 (Conv2D)       (None, 8, 8, 512)         2359808   \n","                                                                 \n"," block5_pool (MaxPooling2D)  (None, 4, 4, 512)         0         \n","                                                                 \n","=================================================================\n","Total params: 14,714,688\n","Trainable params: 0\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["####우리의 모델을 설정( 기학습 모델 전이받아 모델 추가)\n","finetune_model = Sequential()\n","finetune_model.add(transfer_model)\n","finetune_model.add(Flatten())\n","finetune_model.add(Activation('relu'))\n","finetune_model.add(Dropout(0.5))\n","finetune_model.add(Dense(2))\n","finetune_model.add(Activation('softmax'))\n","finetune_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ICM98MDmXj3W","executionInfo":{"status":"ok","timestamp":1667476071859,"user_tz":-540,"elapsed":499,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"56108f3e-7fb4-4105-85d9-87197e3d3d2a"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," vgg16 (Functional)          (None, 4, 4, 512)         14714688  \n","                                                                 \n"," flatten (Flatten)           (None, 8192)              0         \n","                                                                 \n"," activation (Activation)     (None, 8192)              0         \n","                                                                 \n"," dropout (Dropout)           (None, 8192)              0         \n","                                                                 \n"," dense (Dense)               (None, 2)                 16386     \n","                                                                 \n"," activation_1 (Activation)   (None, 2)                 0         \n","                                                                 \n","=================================================================\n","Total params: 14,731,074\n","Trainable params: 16,386\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["####모델 컴파일 (실행 옵션 설정)\n","finetune_model.compile(loss='categorical_crossentropy', \n","                       optimizer='adam',  \n","                       metrics=['accuracy'])\n","history = finetune_model.fit(\n","      X_train, y_train,        ## generator로 생성한 데이터로 학습\n","       epochs=20,             \n","       validation_data=(X_test, y_test),\n","       validation_steps=10) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hg-wYM3XX2GS","executionInfo":{"status":"ok","timestamp":1667476216428,"user_tz":-540,"elapsed":141769,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"accb54a4-e6b3-4b10-b844-9f4093f4f962"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","94/94 [==============================] - 21s 128ms/step - loss: 11.0190 - accuracy: 0.6209 - val_loss: 5.9663 - val_accuracy: 0.7091\n","Epoch 2/20\n","94/94 [==============================] - 6s 63ms/step - loss: 7.7589 - accuracy: 0.7108 - val_loss: 6.0358 - val_accuracy: 0.7252\n","Epoch 3/20\n","94/94 [==============================] - 6s 64ms/step - loss: 6.5838 - accuracy: 0.7310 - val_loss: 6.9960 - val_accuracy: 0.7091\n","Epoch 4/20\n","94/94 [==============================] - 6s 65ms/step - loss: 5.6775 - accuracy: 0.7766 - val_loss: 6.9205 - val_accuracy: 0.7198\n","Epoch 5/20\n","94/94 [==============================] - 6s 65ms/step - loss: 5.4963 - accuracy: 0.7662 - val_loss: 8.0748 - val_accuracy: 0.7225\n","Epoch 6/20\n","94/94 [==============================] - 6s 67ms/step - loss: 5.6176 - accuracy: 0.7773 - val_loss: 7.5471 - val_accuracy: 0.7399\n","Epoch 7/20\n","94/94 [==============================] - 6s 67ms/step - loss: 5.0095 - accuracy: 0.8048 - val_loss: 7.6254 - val_accuracy: 0.7346\n","Epoch 8/20\n","94/94 [==============================] - 6s 68ms/step - loss: 5.2786 - accuracy: 0.7964 - val_loss: 8.9046 - val_accuracy: 0.7051\n","Epoch 9/20\n","94/94 [==============================] - 7s 70ms/step - loss: 4.6776 - accuracy: 0.8142 - val_loss: 9.2407 - val_accuracy: 0.7091\n","Epoch 10/20\n","94/94 [==============================] - 7s 71ms/step - loss: 4.6870 - accuracy: 0.8272 - val_loss: 9.3661 - val_accuracy: 0.7292\n","Epoch 11/20\n","94/94 [==============================] - 7s 71ms/step - loss: 4.9561 - accuracy: 0.8165 - val_loss: 9.6906 - val_accuracy: 0.7118\n","Epoch 12/20\n","94/94 [==============================] - 7s 70ms/step - loss: 4.8205 - accuracy: 0.8229 - val_loss: 9.6438 - val_accuracy: 0.7292\n","Epoch 13/20\n","94/94 [==============================] - 6s 69ms/step - loss: 4.3345 - accuracy: 0.8316 - val_loss: 10.5282 - val_accuracy: 0.7212\n","Epoch 14/20\n","94/94 [==============================] - 7s 70ms/step - loss: 5.1679 - accuracy: 0.8202 - val_loss: 11.1517 - val_accuracy: 0.7051\n","Epoch 15/20\n","94/94 [==============================] - 6s 68ms/step - loss: 5.0438 - accuracy: 0.8289 - val_loss: 10.8398 - val_accuracy: 0.7105\n","Epoch 16/20\n","94/94 [==============================] - 6s 67ms/step - loss: 4.9430 - accuracy: 0.8242 - val_loss: 11.4057 - val_accuracy: 0.7198\n","Epoch 17/20\n","94/94 [==============================] - 6s 67ms/step - loss: 4.4425 - accuracy: 0.8423 - val_loss: 12.2759 - val_accuracy: 0.7158\n","Epoch 18/20\n","94/94 [==============================] - 6s 67ms/step - loss: 5.4652 - accuracy: 0.8256 - val_loss: 11.2551 - val_accuracy: 0.7265\n","Epoch 19/20\n","94/94 [==============================] - 6s 67ms/step - loss: 4.7015 - accuracy: 0.8350 - val_loss: 11.7802 - val_accuracy: 0.7051\n","Epoch 20/20\n","94/94 [==============================] - 6s 67ms/step - loss: 5.1864 - accuracy: 0.8363 - val_loss: 11.0090 - val_accuracy: 0.7306\n"]}]},{"cell_type":"code","source":["history = additional_model.fit(X_train, y_train, \n","                    batch_size = 128, \n","                    epochs = 10, \n","                    verbose = 1,\n","                    validation_data=(X_test, y_test))\n","score = additional_model.evaluate(X_test, y_test)\n","print('loss==>' ,score[0])\n","print('accuracy==>', score[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":841},"id":"vCeIWUIp1YOF","executionInfo":{"status":"error","timestamp":1667460068065,"user_tz":-540,"elapsed":377,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"420f164c-29f6-46a6-f802-f672f826a81e"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-2d0d8955a3dd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m                     \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                     \u001b[0mverbose\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m                     validation_data=(X_test, y_test))\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mscore\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madditional_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'loss==>'\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mtf__train_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1051, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1040, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1030, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 890, in train_step\n        loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 949, in compute_loss\n        y, y_pred, sample_weight, regularization_losses=self.losses)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/compile_utils.py\", line 201, in __call__\n        loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/losses.py\", line 139, in __call__\n        losses = call_fn(y_true, y_pred)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/losses.py\", line 243, in call  **\n        return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/losses.py\", line 1930, in binary_crossentropy\n        backend.binary_crossentropy(y_true, y_pred, from_logits=from_logits),\n    File \"/usr/local/lib/python3.7/dist-packages/keras/backend.py\", line 5283, in binary_crossentropy\n        return tf.nn.sigmoid_cross_entropy_with_logits(labels=target, logits=output)\n\n    ValueError: `logits` and `labels` must have the same shape, received ((None, 1) vs (None, 2)).\n"]}]},{"cell_type":"code","source":["# 6 훈련 과정 시각화 (정확도)\n","plt.plot(history.history['acc'])\n","plt.title('Model accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()\n","\n","# 7 훈련 과정 시각화 (손실)\n","plt.plot(history.history['loss'])\n","plt.title('Model loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()"],"metadata":{"id":"_p1gV9iu1Y48","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"error","timestamp":1667476248320,"user_tz":-540,"elapsed":486,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"1869e016-c7ed-475d-b89e-2f2ae208b840"},"execution_count":12,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-92171536ca4f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 6 훈련 과정 시각화 (정확도)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'acc'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Model accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Epoch'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Accuracy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'acc'"]}]},{"cell_type":"code","source":["######수업VGG#############\n","import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from PIL import Image\n","\n","train_datagen = ImageDataGenerator(rescale=1./255,\n","        horizontal_flip=True,   # 수평 대칭 이미지를 50% 확률로 만들어 추가합니다.\n","        width_shift_range=0.1,  # 전체 크기의 10% 범위에서 좌우로 이동합니다.\n","        height_shift_range=0.1, # 마찬가지로 위, 아래로 이동합니다.\n","        rotation_range=5,\n","        shear_range=0.7,\n","        zoom_range=[0.9, 2.2],\n","        vertical_flip=True,\n","        fill_mode='nearest') \n","train_datagen\n","\n","path = 'C:/data/data증식/'\n","batch_size = 5\n","train_generator = train_datagen.flow_from_directory(\n","       path,                     #+ #Z'고양이',   #학습셋이 있는 폴더의 위치입니다.\n","       target_size=(150, 150),\n","       batch_size=batch_size,    # 한 에포크당 몇장의 사진을 만들 것인가?\n","       class_mode='binary')\n"],"metadata":{"id":"jxdS62JM78sj"},"execution_count":null,"outputs":[]}]}