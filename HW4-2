{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HW4-2","provenance":[],"authorship_tag":"ABX9TyNK3huGRArlOfD8f5jVdloQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":541},"id":"XxNrFYu_NwB7","executionInfo":{"status":"ok","timestamp":1620050348737,"user_tz":-540,"elapsed":25352,"user":{"displayName":"유성운","photoUrl":"","userId":"04010736311021015655"}},"outputId":"6c0a8096-464b-4a83-cb11-0fadb189885c"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.datasets import load_breast_cancer\n","from sklearn.model_selection import train_test_split\n","\n","cancer = load_breast_cancer()\n","x = cancer.data\n","y = cancer.target\n","x_train_all, x_test, y_train_all, y_test = train_test_split(x, y, stratify=y, \n","                                                            test_size=0.2, random_state=42)\n","x_train, x_val, y_train, y_val = train_test_split(x_train_all, y_train_all, stratify=y_train_all, \n","                                                  test_size=0.2, random_state=42)\n","\n","class SingleLayer:\n","    \n","    def __init__(self, learning_rate=0.1, l1=0, l2=0):\n","        self.w = None              # 가중치\n","        self.b = None              # 절편\n","        self.losses = []           # 훈련 손실\n","        self.val_losses = []       # 검증 손실\n","        self.w_history = []        # 가중치 기록\n","        self.lr = learning_rate    # 학습률\n","        self.l1 = l1               # L1 손실 하이퍼파라미터\n","        self.l2 = l2               # L2 손실 하이퍼파라미터\n","\n","    def forpass(self, x):\n","        z = np.dot(x, self.w) + self.b        # 선형 출력을 계산합니다.\n","        return z\n","\n","    def backprop(self, x, err):\n","        m = len(x)\n","        w_grad = np.dot(x.T, err) / m         # 가중치에 대한 그래디언트를 계산합니다.\n","        b_grad = np.sum(err) / m              # 절편에 대한 그래디언트를 계산합니다.\n","        return w_grad, b_grad\n","\n","    def activation(self, z):\n","        z = np.clip(z, -100, None)            # 안전한 np.exp() 계산을 위해\n","        a = 1 / (1 + np.exp(-z))              # 시그모이드 계산\n","        return a\n","        \n","    def fit(self, x, y, epochs=100, x_val=None, y_val=None):\n","        y = y.reshape(-1, 1)                  # 타깃을 열 벡터로 바꿉니다.\n","        y_val = y_val.reshape(-1, 1)\n","        m = len(x)                            # 샘플 개수를 저장합니다.\n","        self.w = np.ones((x.shape[1], 1))     # 가중치를 초기화합니다.\n","        self.b = 0                            # 절편을 초기화합니다.\n","        self.w_history.append(self.w.copy())  # 가중치를 기록합니다.\n","        # epochs만큼 반복합니다.\n","        for i in range(epochs):\n","            z = self.forpass(x)               # 정방향 계산을 수행합니다.\n","            a = self.activation(z)            # 활성화 함수를 적용합니다.\n","            err = -(y - a)                    # 오차를 계산합니다.\n","            # 오차를 역전파하여 그래디언트를 계산합니다.\n","            w_grad, b_grad = self.backprop(x, err)\n","            # 그래디언트에 페널티 항의 미분 값을 더합니다.\n","            w_grad += (self.l1 * np.sign(self.w) + self.l2 * self.w) / m\n","            # 가중치와 절편을 업데이트합니다.\n","            self.w -= self.lr * w_grad\n","            self.b -= self.lr * b_grad\n","            # 가중치를 기록합니다.\n","            self.w_history.append(self.w.copy())\n","            # 안전한 로그 계산을 위해 클리핑합니다.\n","            a = np.clip(a, 1e-10, 1-1e-10)\n","            # 로그 손실과 규제 손실을 더하여 리스트에 추가합니다.\n","            loss = np.sum(-(y*np.log(a) + (1-y)*np.log(1-a)))\n","            self.losses.append((loss + self.reg_loss()) / m)\n","            # 검증 세트에 대한 손실을 계산합니다.\n","            self.update_val_loss(x_val, y_val)\n","    \n","    def predict(self, x):\n","        z = self.forpass(x)      # 정방향 계산을 수행합니다.\n","        return z > 0             # 스텝 함수를 적용합니다.\n","    \n","    def score(self, x, y):\n","        # 예측과 타깃 열 벡터를 비교하여 True의 비율을 반환합니다.\n","        return np.mean(self.predict(x) == y.reshape(-1, 1))\n","    \n","    def reg_loss(self):\n","        # 가중치에 규제를 적용합니다.\n","        return self.l1 * np.sum(np.abs(self.w)) + self.l2 / 2 * np.sum(self.w**2)\n","    \n","    def update_val_loss(self, x_val, y_val):\n","        z = self.forpass(x_val)            # 정방향 계산을 수행합니다.\n","        a = self.activation(z)             # 활성화 함수를 적용합니다.\n","        a = np.clip(a, 1e-10, 1-1e-10)     # 출력 값을 클리핑합니다.\n","        # 로그 손실과 규제 손실을 더하여 리스트에 추가합니다.\n","        val_loss = np.sum(-(y_val*np.log(a) + (1-y_val)*np.log(1-a)))\n","        self.val_losses.append((val_loss + self.reg_loss()) / len(y_val))\n","\n","scaler = StandardScaler()\n","scaler.fit(x_train)\n","x_train_scaled = scaler.transform(x_train)\n","x_val_scaled = scaler.transform(x_val)\n","\n","single_layer = SingleLayer(l2=0.01)\n","single_layer.fit(x_train_scaled, y_train, \n","                 x_val=x_val_scaled, y_val=y_val, epochs=10000)\n","single_layer.score(x_val_scaled, y_val)\n","\n","class DualLayer(SingleLayer):\n","    \n","    def __init__(self, units=10, learning_rate=0.1, l1=0, l2=0):\n","        self.units = units         # 은닉층의 뉴런 개수\n","        self.w1 = None             # 은닉층1의 가중치\n","        self.b1 = None             # 은닉층1의 절편\n","        self.w2 = None             # 은닉층2의 가중치\n","        self.b2 = None             # 은닉층2의 절편\n","        self.w3  = None             # 출력층의 가중치\n","        self.b3 = None             # 출력층의 절편\n","        self.a1 = None             # 은닉층의 활성화 출력\n","        self.a2 = None             # 은닉층의 활성화 출력\n","        self.losses = []           # 훈련 손실\n","        self.val_losses = []       # 검증 손실\n","        self.lr = learning_rate    # 학습률\n","        self.l1 = l1               # L1 손실 하이퍼파라미터\n","        self.l2 = l2               # L2 손실 하이퍼파라미터\n","\n","    def forpass(self, x):\n","        z1 = np.dot(x, self.w1) + self.b1        # 첫 번째 층의 선형 식을 계산합니다\n","        self.a1 = self.activation(z1)            # 활성화 함수를 적용합니다\n","        z2 = np.dot(self.a1, self.w2) + self.b2  # 두 번째 층의 선형 식을 계산합니다.\n","        self.a2 = self.activation(z2)\n","        z3 = np.dot(self.a2, self.w3) + self.b3  \n","        return z3\n","\n","    def backprop(self, x, err):\n","        m = len(x)       # 샘플 개수\n","        # 출력층의 가중치와 절편에 대한 그래디언트를 계산합니다.\n","        w3_grad = np.dot(self.a2.T, err) / m\n","        b3_grad = np.sum(err) / m\n","        # 시그모이드 함수까지 그레이디언트를 계산합니다\n","        err_to_hidden = np.dot(err, self.w3.T) * self.a2 * (1-self.a2) * self.w2.T * self.a1 * (1-self.a1)\n","        # 은닉층1의 가중치와 절편에 대한 그레이디언트를 계산합니다.\n","        w2_grad = np.dot(self.a1.T, err) / m\n","        b2_grad = np.sum(err) / m\n","        # 은닉층2의 가중치와 절편에 대한 그레이디언트를 계산합니다.\n","        w1_grad = np.dot(x.T, err_to_hidden) / m\n","        b1_grad = np.sum(err_to_hidden, axis=0) / m\n","        return w1_grad, b1_grad, w2_grad, b2_grad, w3_grad, b3_grad\n","\n","    def init_weights(self, n_features):\n","        self.w1 = np.ones((n_features, self.units))  # (특성 개수, 은닉층의 크기)\n","        self.b1 = np.zeros(self.units)               # 은닉층의 크기\n","        self.w2 = np.ones((self.units, 1))           # (입력 개수, 은닉층의 크기)\n","        self.b2 = np.zeros(self.units)               # 은닉층의 크기\n","        self.w3 = np.ones((self.units, 1))           # (은닉층의 크기, 1)\n","        self.b3 = 0\n","        \n","    def fit(self, x, y, epochs=100, x_val=None, y_val=None):\n","        y = y.reshape(-1, 1)          # 타깃을 열 벡터로 바꿉니다.\n","        y_val = y_val.reshape(-1, 1)\n","        m = len(x)                    # 샘플 개수를 저장합니다.\n","        self.init_weights(x.shape[1]) # 은닉층과 출력층의 가중치를 초기화합니다.\n","        # epochs만큼 반복합니다.\n","        for i in range(epochs):\n","            a = self.training(x, y, m)\n","            # 안전한 로그 계산을 위해 클리핑합니다.\n","            a = np.clip(a, 1e-10, 1-1e-10)\n","            # 로그 손실과 규제 손실을 더하여 리스트에 추가합니다.\n","            loss = np.sum(-(y*np.log(a) + (1-y)*np.log(1-a)))\n","            self.losses.append((loss + self.reg_loss()) / m)\n","            # 검증 세트에 대한 손실을 계산합니다.\n","            self.update_val_loss(x_val, y_val)\n","            \n","    def training(self, x, y, m):\n","        z = self.forpass(x)       # 정방향 계산을 수행합니다.\n","        a = self.activation(z)    # 활성화 함수를 적용합니다.\n","        err = -(y - a)            # 오차를 계산합니다.\n","        # 오차를 역전파하여 그래디언트를 계산합니다.\n","        w1_grad, b1_grad, w2_grad, b2_grad, w3_grad, b3_grad = self.backprop(x, err)\n","        # 그래디언트에 페널티 항의 미분 값을 더합니다\n","        w1_grad += (self.l1 * np.sign(self.w1) + self.l2 * self.w1) / m\n","        w2_grad += (self.l1 * np.sign(self.w2) + self.l2 * self.w2) / m\n","        w3_grad += (self.l1 * np.sign(self.w3) + self.l2 * self.w3) / m\n","        # 은닉층의 가중치와 절편을 업데이트합니다.\n","        self.w1 -= self.lr * w1_grad\n","        self.b1 -= self.lr * b1_grad\n","        self.w2 -= self.lr * w2_grad\n","        self.b2 -= self.lr * b2_grad\n","        # 출력층의 가중치와 절편을 업데이트합니다.\n","        self.w3 -= self.lr * w3_grad\n","        self.b3 -= self.lr * b3_grad\n","        return a\n","    \n","    def reg_loss(self):\n","        # 은닉층과 출력층의 가중치에 규제를 적용합니다.\n","        return self.l1 * (np.sum(np.abs(self.w1)) + np.sum(np.abs(self.w2)) + np.sum(np.abs(self.w3))) + \\\n","               self.l2 / 2 * (np.sum(self.w1**2) + np.sum(self.w2**2)+ np.sum(self.w3**2))\n","\n","dual_layer = DualLayer(l2=0.01)\n","dual_layer.fit(x_train_scaled, y_train, \n","               x_val=x_val_scaled, y_val=y_val, epochs=20000)\n","dual_layer.score(x_val_scaled, y_val)\n","\n","plt.ylim(0,1.7)\n","plt.plot(dual_layer.losses)\n","plt.plot(dual_layer.val_losses)\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train_loss', 'val_loss'])\n","plt.show()\n","\n","class RandomInitNetwork(DualLayer):\n","    \n","    def init_weights(self, n_features):\n","        np.random.seed(42)\n","        self.w1 = np.random.normal(0, 1, \n","                                   (n_features, self.units))  # (특성 개수, 은닉층의 크기)\n","        self.b1 = np.zeros(self.units)                        # 은닉층의 크기\n","        self.w2 = np.random.normal(0, 1, \n","                                   (self.units, 1))  # (입력 개수, 은닉층의 크기)\n","        self.b2 = np.zeros(self.units)                        # 은닉층의 크기\n","        self.w3 = np.random.normal(0, 1, \n","                                   (self.units, 1))           # (은닉층의 크기, 1)\n","        self.b3 = 0\n","\n","random_init_net = RandomInitNetwork(l2=0.01)\n","random_init_net.fit(x_train_scaled, y_train,\n","                    x_val=x_val_scaled, y_val=y_val, epochs=500)\n","\n","plt.plot(random_init_net.losses)\n","plt.plot(random_init_net.val_losses)\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train_loss', 'val_loss'])\n","plt.show()"],"execution_count":31,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}