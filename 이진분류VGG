{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1uy7mrvUCiUrbBX-3w46ETZgBimUQNjjn","authorship_tag":"ABX9TyP3jHV5Bnj15xUGSZqA9gnH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ifk3Ww1ivhkV","executionInfo":{"status":"ok","timestamp":1667882738143,"user_tz":-540,"elapsed":1902992,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"353532e6-2693-47ed-f5e4-501c8ad87376"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58889256/58889256 [==============================] - 2s 0us/step\n","<keras.engine.input_layer.InputLayer object at 0x7f8e339f8ad0> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e33197f90> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e331eb5d0> : False\n","<keras.layers.pooling.max_pooling2d.MaxPooling2D object at 0x7f8e328ec0d0> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e205182d0> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e347c8b10> : False\n","<keras.layers.pooling.max_pooling2d.MaxPooling2D object at 0x7f8e20518ad0> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e20525910> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e2052af50> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e2051e490> : False\n","<keras.layers.pooling.max_pooling2d.MaxPooling2D object at 0x7f8e20531610> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e20539690> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e20539750> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e205391d0> : False\n","<keras.layers.pooling.max_pooling2d.MaxPooling2D object at 0x7f8e20549650> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e20544d90> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8ea3021d90> : False\n","<keras.layers.convolutional.conv2d.Conv2D object at 0x7f8e2052a510> : False\n","<keras.layers.pooling.max_pooling2d.MaxPooling2D object at 0x7f8e328ec9d0> : False\n","Found 1408 images belonging to 2 classes.\n","Found 1408 images belonging to 2 classes.\n","Found 1408 images belonging to 2 classes.\n","Epoch 1/100\n","15/15 [==============================] - 628s 44s/step - loss: 0.8739 - accuracy: 0.5764 - val_loss: 0.7630 - val_accuracy: 0.5526\n","Epoch 2/100\n","15/15 [==============================] - 40s 3s/step - loss: 0.8418 - accuracy: 0.5799 - val_loss: 0.7015 - val_accuracy: 0.5554\n","Epoch 3/100\n","15/15 [==============================] - 36s 2s/step - loss: 0.7604 - accuracy: 0.6007 - val_loss: 0.6674 - val_accuracy: 0.5923\n","Epoch 4/100\n","15/15 [==============================] - 32s 2s/step - loss: 0.7840 - accuracy: 0.5467 - val_loss: 0.6449 - val_accuracy: 0.6214\n","Epoch 5/100\n","15/15 [==============================] - 31s 2s/step - loss: 0.7362 - accuracy: 0.6433 - val_loss: 0.6227 - val_accuracy: 0.6555\n","Epoch 6/100\n","15/15 [==============================] - 22s 1s/step - loss: 0.7030 - accuracy: 0.5933 - val_loss: 0.6064 - val_accuracy: 0.6712\n","Epoch 7/100\n","15/15 [==============================] - 18s 1s/step - loss: 0.6324 - accuracy: 0.6733 - val_loss: 0.5890 - val_accuracy: 0.6868\n","Epoch 8/100\n","15/15 [==============================] - 19s 1s/step - loss: 0.7076 - accuracy: 0.6367 - val_loss: 0.5759 - val_accuracy: 0.6911\n","Epoch 9/100\n","15/15 [==============================] - 17s 1s/step - loss: 0.6147 - accuracy: 0.6567 - val_loss: 0.5592 - val_accuracy: 0.7131\n","Epoch 10/100\n","15/15 [==============================] - 14s 987ms/step - loss: 0.6581 - accuracy: 0.6500 - val_loss: 0.5489 - val_accuracy: 0.7159\n","Epoch 11/100\n","15/15 [==============================] - 13s 922ms/step - loss: 0.6100 - accuracy: 0.7014 - val_loss: 0.5340 - val_accuracy: 0.7344\n","Epoch 12/100\n","15/15 [==============================] - 11s 762ms/step - loss: 0.5985 - accuracy: 0.6800 - val_loss: 0.5167 - val_accuracy: 0.7514\n","Epoch 13/100\n","15/15 [==============================] - 13s 917ms/step - loss: 0.5338 - accuracy: 0.7333 - val_loss: 0.4980 - val_accuracy: 0.7699\n","Epoch 14/100\n","15/15 [==============================] - 12s 829ms/step - loss: 0.5460 - accuracy: 0.6900 - val_loss: 0.4891 - val_accuracy: 0.7756\n","Epoch 15/100\n","15/15 [==============================] - 11s 748ms/step - loss: 0.5402 - accuracy: 0.7233 - val_loss: 0.4816 - val_accuracy: 0.7749\n","Epoch 16/100\n","15/15 [==============================] - 11s 797ms/step - loss: 0.5581 - accuracy: 0.7367 - val_loss: 0.4725 - val_accuracy: 0.7798\n","Epoch 17/100\n","15/15 [==============================] - 11s 710ms/step - loss: 0.5811 - accuracy: 0.7188 - val_loss: 0.4600 - val_accuracy: 0.7940\n","Epoch 18/100\n","15/15 [==============================] - 11s 730ms/step - loss: 0.5039 - accuracy: 0.7300 - val_loss: 0.4510 - val_accuracy: 0.7947\n","Epoch 19/100\n","15/15 [==============================] - 10s 665ms/step - loss: 0.5144 - accuracy: 0.7467 - val_loss: 0.4401 - val_accuracy: 0.8061\n","Epoch 20/100\n","15/15 [==============================] - 10s 711ms/step - loss: 0.5512 - accuracy: 0.7433 - val_loss: 0.4335 - val_accuracy: 0.8068\n","Epoch 21/100\n","15/15 [==============================] - 10s 682ms/step - loss: 0.5123 - accuracy: 0.7667 - val_loss: 0.4244 - val_accuracy: 0.8132\n","Epoch 22/100\n","15/15 [==============================] - 10s 688ms/step - loss: 0.5017 - accuracy: 0.7600 - val_loss: 0.4228 - val_accuracy: 0.8118\n","Epoch 23/100\n","15/15 [==============================] - 10s 666ms/step - loss: 0.4869 - accuracy: 0.7467 - val_loss: 0.4181 - val_accuracy: 0.8111\n","Epoch 24/100\n","15/15 [==============================] - 10s 690ms/step - loss: 0.4689 - accuracy: 0.7847 - val_loss: 0.4142 - val_accuracy: 0.8111\n","Epoch 25/100\n","15/15 [==============================] - 10s 686ms/step - loss: 0.5267 - accuracy: 0.7467 - val_loss: 0.4132 - val_accuracy: 0.8118\n","Epoch 26/100\n","15/15 [==============================] - 10s 660ms/step - loss: 0.4422 - accuracy: 0.8000 - val_loss: 0.4079 - val_accuracy: 0.8118\n","Epoch 27/100\n","15/15 [==============================] - 9s 655ms/step - loss: 0.4567 - accuracy: 0.7867 - val_loss: 0.4022 - val_accuracy: 0.8153\n","Epoch 28/100\n","15/15 [==============================] - 10s 685ms/step - loss: 0.4574 - accuracy: 0.8000 - val_loss: 0.3946 - val_accuracy: 0.8239\n","Epoch 29/100\n","15/15 [==============================] - 9s 648ms/step - loss: 0.4680 - accuracy: 0.7882 - val_loss: 0.3903 - val_accuracy: 0.8253\n","Epoch 30/100\n","15/15 [==============================] - 10s 665ms/step - loss: 0.4488 - accuracy: 0.7867 - val_loss: 0.3870 - val_accuracy: 0.8253\n","Epoch 31/100\n","15/15 [==============================] - 9s 658ms/step - loss: 0.4433 - accuracy: 0.8229 - val_loss: 0.3837 - val_accuracy: 0.8274\n","Epoch 32/100\n","15/15 [==============================] - 9s 659ms/step - loss: 0.4647 - accuracy: 0.7667 - val_loss: 0.3828 - val_accuracy: 0.8288\n","Epoch 33/100\n","15/15 [==============================] - 9s 660ms/step - loss: 0.4399 - accuracy: 0.7900 - val_loss: 0.3765 - val_accuracy: 0.8310\n","Epoch 34/100\n","15/15 [==============================] - 9s 648ms/step - loss: 0.4509 - accuracy: 0.7847 - val_loss: 0.3621 - val_accuracy: 0.8338\n","Epoch 35/100\n","15/15 [==============================] - 14s 950ms/step - loss: 0.4482 - accuracy: 0.7867 - val_loss: 0.3556 - val_accuracy: 0.8381\n","Epoch 36/100\n","15/15 [==============================] - 9s 649ms/step - loss: 0.4478 - accuracy: 0.7847 - val_loss: 0.3545 - val_accuracy: 0.8402\n","Epoch 37/100\n","15/15 [==============================] - 9s 657ms/step - loss: 0.4807 - accuracy: 0.7533 - val_loss: 0.3544 - val_accuracy: 0.8381\n","Epoch 38/100\n","15/15 [==============================] - 9s 651ms/step - loss: 0.4290 - accuracy: 0.8067 - val_loss: 0.3496 - val_accuracy: 0.8409\n","Epoch 39/100\n","15/15 [==============================] - 9s 653ms/step - loss: 0.4289 - accuracy: 0.7967 - val_loss: 0.3496 - val_accuracy: 0.8402\n","Epoch 40/100\n","15/15 [==============================] - 9s 653ms/step - loss: 0.4554 - accuracy: 0.7700 - val_loss: 0.3469 - val_accuracy: 0.8452\n","Epoch 41/100\n","15/15 [==============================] - 10s 660ms/step - loss: 0.4119 - accuracy: 0.8133 - val_loss: 0.3465 - val_accuracy: 0.8445\n","Epoch 42/100\n","15/15 [==============================] - 9s 654ms/step - loss: 0.4355 - accuracy: 0.7933 - val_loss: 0.3467 - val_accuracy: 0.8473\n","Epoch 43/100\n","15/15 [==============================] - 9s 652ms/step - loss: 0.4443 - accuracy: 0.7833 - val_loss: 0.3507 - val_accuracy: 0.8473\n","Epoch 44/100\n","15/15 [==============================] - 9s 653ms/step - loss: 0.3905 - accuracy: 0.8367 - val_loss: 0.3579 - val_accuracy: 0.8381\n","Epoch 45/100\n","15/15 [==============================] - 9s 653ms/step - loss: 0.3838 - accuracy: 0.8300 - val_loss: 0.3475 - val_accuracy: 0.8487\n","Epoch 46/100\n","15/15 [==============================] - 9s 652ms/step - loss: 0.4160 - accuracy: 0.8100 - val_loss: 0.3366 - val_accuracy: 0.8544\n","Epoch 47/100\n","15/15 [==============================] - 10s 662ms/step - loss: 0.3537 - accuracy: 0.8433 - val_loss: 0.3319 - val_accuracy: 0.8551\n","Epoch 48/100\n","15/15 [==============================] - 9s 651ms/step - loss: 0.4184 - accuracy: 0.7867 - val_loss: 0.3280 - val_accuracy: 0.8565\n","Epoch 49/100\n","15/15 [==============================] - 10s 661ms/step - loss: 0.4145 - accuracy: 0.7700 - val_loss: 0.3281 - val_accuracy: 0.8594\n","Epoch 50/100\n","15/15 [==============================] - 9s 657ms/step - loss: 0.3650 - accuracy: 0.8368 - val_loss: 0.3231 - val_accuracy: 0.8601\n","Epoch 51/100\n","15/15 [==============================] - 10s 663ms/step - loss: 0.3901 - accuracy: 0.8200 - val_loss: 0.3218 - val_accuracy: 0.8615\n","Epoch 52/100\n","15/15 [==============================] - 9s 657ms/step - loss: 0.3976 - accuracy: 0.8333 - val_loss: 0.3205 - val_accuracy: 0.8629\n","Epoch 53/100\n","15/15 [==============================] - 9s 652ms/step - loss: 0.3888 - accuracy: 0.8403 - val_loss: 0.3222 - val_accuracy: 0.8643\n","Epoch 54/100\n","15/15 [==============================] - 9s 658ms/step - loss: 0.4675 - accuracy: 0.7917 - val_loss: 0.3157 - val_accuracy: 0.8636\n","Epoch 55/100\n","15/15 [==============================] - 9s 658ms/step - loss: 0.4571 - accuracy: 0.7800 - val_loss: 0.3144 - val_accuracy: 0.8679\n","Epoch 56/100\n","15/15 [==============================] - 10s 661ms/step - loss: 0.3881 - accuracy: 0.8300 - val_loss: 0.3115 - val_accuracy: 0.8686\n","Epoch 57/100\n","15/15 [==============================] - 9s 649ms/step - loss: 0.4129 - accuracy: 0.8090 - val_loss: 0.3075 - val_accuracy: 0.8700\n","Epoch 58/100\n","15/15 [==============================] - 9s 650ms/step - loss: 0.4970 - accuracy: 0.7604 - val_loss: 0.3037 - val_accuracy: 0.8714\n","Epoch 59/100\n","15/15 [==============================] - 9s 659ms/step - loss: 0.3816 - accuracy: 0.8368 - val_loss: 0.3002 - val_accuracy: 0.8764\n","Epoch 60/100\n","15/15 [==============================] - 9s 656ms/step - loss: 0.4142 - accuracy: 0.8264 - val_loss: 0.2993 - val_accuracy: 0.8764\n","Epoch 61/100\n","15/15 [==============================] - 10s 665ms/step - loss: 0.4047 - accuracy: 0.8233 - val_loss: 0.3008 - val_accuracy: 0.8750\n","Epoch 62/100\n","15/15 [==============================] - 10s 679ms/step - loss: 0.3622 - accuracy: 0.8567 - val_loss: 0.3029 - val_accuracy: 0.8736\n","Epoch 63/100\n","15/15 [==============================] - 10s 665ms/step - loss: 0.3677 - accuracy: 0.8233 - val_loss: 0.3059 - val_accuracy: 0.8729\n","Epoch 64/100\n","15/15 [==============================] - 10s 661ms/step - loss: 0.3661 - accuracy: 0.8400 - val_loss: 0.3032 - val_accuracy: 0.8778\n","Epoch 65/100\n","15/15 [==============================] - 10s 667ms/step - loss: 0.4129 - accuracy: 0.7967 - val_loss: 0.3010 - val_accuracy: 0.8757\n","Epoch 66/100\n","15/15 [==============================] - 9s 656ms/step - loss: 0.3428 - accuracy: 0.8533 - val_loss: 0.3009 - val_accuracy: 0.8778\n","Epoch 67/100\n","15/15 [==============================] - 9s 644ms/step - loss: 0.3704 - accuracy: 0.8611 - val_loss: 0.2977 - val_accuracy: 0.8778\n","Epoch 68/100\n","15/15 [==============================] - 9s 656ms/step - loss: 0.3616 - accuracy: 0.8533 - val_loss: 0.2988 - val_accuracy: 0.8771\n","Epoch 69/100\n","15/15 [==============================] - 9s 646ms/step - loss: 0.4066 - accuracy: 0.8167 - val_loss: 0.2919 - val_accuracy: 0.8857\n","Epoch 70/100\n","15/15 [==============================] - 9s 643ms/step - loss: 0.3337 - accuracy: 0.8533 - val_loss: 0.2899 - val_accuracy: 0.8878\n","Epoch 71/100\n","15/15 [==============================] - 9s 652ms/step - loss: 0.3451 - accuracy: 0.8667 - val_loss: 0.2890 - val_accuracy: 0.8878\n","Epoch 72/100\n","15/15 [==============================] - 9s 645ms/step - loss: 0.3854 - accuracy: 0.8567 - val_loss: 0.2839 - val_accuracy: 0.8864\n","Epoch 73/100\n","15/15 [==============================] - 9s 637ms/step - loss: 0.3554 - accuracy: 0.8368 - val_loss: 0.2814 - val_accuracy: 0.8878\n","Epoch 74/100\n","15/15 [==============================] - 9s 652ms/step - loss: 0.3699 - accuracy: 0.8233 - val_loss: 0.2818 - val_accuracy: 0.8864\n","Epoch 75/100\n","15/15 [==============================] - 9s 655ms/step - loss: 0.3595 - accuracy: 0.8433 - val_loss: 0.2807 - val_accuracy: 0.8871\n","Epoch 76/100\n","15/15 [==============================] - 9s 645ms/step - loss: 0.3963 - accuracy: 0.8433 - val_loss: 0.2798 - val_accuracy: 0.8899\n","Epoch 77/100\n","15/15 [==============================] - 9s 653ms/step - loss: 0.3913 - accuracy: 0.8267 - val_loss: 0.2764 - val_accuracy: 0.8906\n","Epoch 78/100\n","15/15 [==============================] - 9s 633ms/step - loss: 0.4108 - accuracy: 0.8056 - val_loss: 0.2752 - val_accuracy: 0.8899\n","Epoch 79/100\n","15/15 [==============================] - 9s 646ms/step - loss: 0.4257 - accuracy: 0.8067 - val_loss: 0.2750 - val_accuracy: 0.8906\n","Epoch 80/100\n","15/15 [==============================] - 9s 647ms/step - loss: 0.3570 - accuracy: 0.8233 - val_loss: 0.2731 - val_accuracy: 0.8928\n","Epoch 81/100\n","15/15 [==============================] - 9s 645ms/step - loss: 0.4668 - accuracy: 0.8200 - val_loss: 0.2716 - val_accuracy: 0.8935\n","Epoch 82/100\n","15/15 [==============================] - 9s 639ms/step - loss: 0.3665 - accuracy: 0.8133 - val_loss: 0.2705 - val_accuracy: 0.8935\n","Epoch 83/100\n","15/15 [==============================] - 9s 646ms/step - loss: 0.3623 - accuracy: 0.8200 - val_loss: 0.2721 - val_accuracy: 0.8942\n","Epoch 84/100\n","15/15 [==============================] - 9s 640ms/step - loss: 0.3558 - accuracy: 0.8438 - val_loss: 0.2773 - val_accuracy: 0.8928\n","Epoch 85/100\n","15/15 [==============================] - 9s 641ms/step - loss: 0.3929 - accuracy: 0.8299 - val_loss: 0.2694 - val_accuracy: 0.8920\n","Epoch 86/100\n","15/15 [==============================] - 9s 638ms/step - loss: 0.3645 - accuracy: 0.8300 - val_loss: 0.2672 - val_accuracy: 0.8906\n","Epoch 87/100\n","15/15 [==============================] - 9s 635ms/step - loss: 0.3555 - accuracy: 0.8368 - val_loss: 0.2670 - val_accuracy: 0.8928\n","Epoch 88/100\n","15/15 [==============================] - 9s 639ms/step - loss: 0.3307 - accuracy: 0.8300 - val_loss: 0.2653 - val_accuracy: 0.8942\n","Epoch 89/100\n","15/15 [==============================] - 9s 644ms/step - loss: 0.3691 - accuracy: 0.8167 - val_loss: 0.2633 - val_accuracy: 0.8928\n","Epoch 90/100\n","15/15 [==============================] - 9s 646ms/step - loss: 0.3240 - accuracy: 0.8467 - val_loss: 0.2612 - val_accuracy: 0.8928\n","Epoch 91/100\n","15/15 [==============================] - 9s 640ms/step - loss: 0.3891 - accuracy: 0.8333 - val_loss: 0.2620 - val_accuracy: 0.8928\n","Epoch 92/100\n","15/15 [==============================] - 9s 634ms/step - loss: 0.3993 - accuracy: 0.7847 - val_loss: 0.2631 - val_accuracy: 0.8928\n","Epoch 93/100\n","15/15 [==============================] - 9s 656ms/step - loss: 0.3469 - accuracy: 0.8367 - val_loss: 0.2635 - val_accuracy: 0.8956\n","Epoch 94/100\n","15/15 [==============================] - 9s 651ms/step - loss: 0.3530 - accuracy: 0.8500 - val_loss: 0.2659 - val_accuracy: 0.8942\n","Epoch 95/100\n","15/15 [==============================] - 9s 643ms/step - loss: 0.3386 - accuracy: 0.8567 - val_loss: 0.2670 - val_accuracy: 0.8949\n","Epoch 96/100\n","15/15 [==============================] - 9s 647ms/step - loss: 0.3545 - accuracy: 0.8267 - val_loss: 0.2667 - val_accuracy: 0.8928\n","Epoch 97/100\n","15/15 [==============================] - 9s 640ms/step - loss: 0.3371 - accuracy: 0.8500 - val_loss: 0.2671 - val_accuracy: 0.8942\n","Epoch 98/100\n","15/15 [==============================] - 9s 638ms/step - loss: 0.3172 - accuracy: 0.8667 - val_loss: 0.2642 - val_accuracy: 0.8956\n","Epoch 99/100\n","15/15 [==============================] - 9s 640ms/step - loss: 0.3843 - accuracy: 0.8300 - val_loss: 0.2586 - val_accuracy: 0.9027\n","Epoch 100/100\n","15/15 [==============================] - 9s 642ms/step - loss: 0.3156 - accuracy: 0.8733 - val_loss: 0.2602 - val_accuracy: 0.9006\n"]}],"source":["import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras import layers, models \n","from tensorflow.keras.applications import VGG16\n","\n","base = VGG16(weights= 'imagenet', include_top=False, input_shape = (150,150,3))\n","base.trainable = False\n","for layer in base.layers:\n","  print('{} : {}'.format(layer, layer.trainable))\n","  \n","train_gen = ImageDataGenerator(horizontal_flip = True,\\\n","                              rotation_range = 35,\n","                              rescale = 1./255,\n","                              zoom_range = [0.7,1.5],\n","                              brightness_range = (0.7,1.0),\n","                              width_shift_range = 0.1,\n","                              height_shift_range = 0.1) \n","#val, gen generator\n","VT_gen = ImageDataGenerator(rescale = 1./255)\n","\n","batch_size = 20\n","#generator.flowfromdirectory\n","train_genorator = train_gen.flow_from_directory('/content/drive/MyDrive/dataset',\n","                                                target_size = (150,150), batch_size = batch_size, class_mode = 'binary')\n","val_genorator = VT_gen.flow_from_directory('/content/drive/MyDrive/dataset_val', shuffle = False, \n","                                           target_size = (150,150), batch_size = batch_size ,class_mode = 'binary')\n","test_genorator = VT_gen.flow_from_directory('/content/drive/MyDrive/dataset_test', shuffle = False,\n","                                           target_size = (150,150), batch_size = batch_size ,class_mode = 'binary')\n","\n","\n","model = models.Sequential()\n","model.add(base)\n","model.add(layers.BatchNormalization())\n","model.add(layers.Flatten())\n","model.add(layers.Dense(256, activation = 'relu'))\n","model.add(layers.Dropout(0.4))\n","model.add(layers.Dense(1, activation = 'sigmoid'))\n","\n","sgd = tf.keras.optimizers.SGD(learning_rate= 1.e-4, momentum = 0.9)\n","model.compile(optimizer = sgd, loss = 'binary_crossentropy',metrics = ['accuracy'])\n","epochs = 100\n","\n","hist = model.fit(train_genorator, batch_size = batch_size, epochs= epochs , validation_data = val_genorator,\n","          steps_per_epoch= 300//batch_size)"]},{"cell_type":"code","source":["import numpy as np\n","def print_res(prob):\n","  for i in range(len(prob)):\n","    if prob[i] >= 0.4: # 0.5로 조정햇을때, 미착용에 대한 오차가 많다...\n","      print('predict proba: {}'.format(prob[0]))\n","      print('bright avocado')\n","    else:\n","      print('predict proba: {}'.format(1-prob[0]))\n","      print('brown avocado')"],"metadata":{"id":"-_IR0rasDHnt","executionInfo":{"status":"ok","timestamp":1667876281366,"user_tz":-540,"elapsed":368,"user":{"displayName":"유성운","userId":"04010736311021015655"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["prob = model.predict( test_genorator )"],"metadata":{"id":"pk0Z-MlhdLwA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if prob[i] >= 0.4: # 0.5로 조정햇을때, 미착용에 대한 오차가 많다...\n","  print('predict proba: {}'.format(prob[0]))\n","  print('bright avocado')\n","else:\n","  print('predict proba: {}'.format(1-prob[0]))\n","  print('brown avocado')"],"metadata":{"id":"4KoAV51vdBGg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["prob = model.predict( test_genorator )\n","print( prob )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K1u8dkYVFakn","executionInfo":{"status":"ok","timestamp":1667883328363,"user_tz":-540,"elapsed":442347,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"ef688f3a-014f-4774-821b-9a6c4ad7d9cd"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["71/71 [==============================] - 433s 6s/step\n","[[0.02848441]\n"," [0.00358083]\n"," [0.27934366]\n"," ...\n"," [0.9323078 ]\n"," [0.82865894]\n"," [0.81158096]]\n"]}]},{"cell_type":"code","source":["print(prob[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzBPGA7KKkld","executionInfo":{"status":"ok","timestamp":1667883652291,"user_tz":-540,"elapsed":3,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"4c8cfbb1-adb2-465e-c25b-df9afeb35d2a"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.00358083]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from tensorflow.keras.preprocessing import image\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\n","\n","number_1 = int(input(\"번호를 입력하세요 : \")) # 10, 50, 100\n","IMAGE_SIZE    = (224, 224)\n","\n","if prob[number_1] >= 0.4: # 0.5로 조정햇을때, 미착용에 대한 오차가 많다...\n","  print('predict proba: {}'.format(prob[number_1]))\n","  print('brown avocado')\n","else:\n","  print('predict proba: {}'.format(1-prob[number_1]))\n","  print('bright avocado')\n","\n","#test_image = image.load_img(test_genorator.iloc[number_1, 0]\n","#                            ,target_size =IMAGE_SIZE )\n","#test_image = image.img_to_array(test_image)\n","plt.imshow(test_genorator[number_1]);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":727},"id":"Um6069Y_cJ2c","executionInfo":{"status":"error","timestamp":1667883838807,"user_tz":-540,"elapsed":4468,"user":{"displayName":"유성운","userId":"04010736311021015655"}},"outputId":"22f693c5-a590-4b85-ce79-ef9bdc0f3fab"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["번호를 입력하세요 : 1\n","predict proba: [0.9964192]\n","bright avocado\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:706: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  x = np.array(x, subok=True, copy=copy)\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-e78b2efa2973>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m#                            ,target_size =IMAGE_SIZE )\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m#test_image = image.img_to_array(test_image)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_genorator\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnumber_1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, data, **kwargs)\u001b[0m\n\u001b[1;32m   2649\u001b[0m         \u001b[0mfilternorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilternorm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilterrad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilterrad\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimlim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimlim\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         resample=resample, url=url, **({\"data\": data} if data is not\n\u001b[0;32m-> 2651\u001b[0;31m         None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2652\u001b[0m     \u001b[0msci\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__ret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2653\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m__ret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1563\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1564\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1565\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1567\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    356\u001b[0m                 \u001b[0;34mf\"%(removal)s.  If any parameter follows {name!r}, they \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m                 f\"should be pass as keyword, not positionally.\")\n\u001b[0;32m--> 358\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    356\u001b[0m                 \u001b[0;34mf\"%(removal)s.  If any parameter follows {name!r}, they \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    357\u001b[0m                 f\"should be pass as keyword, not positionally.\")\n\u001b[0;32m--> 358\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    359\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mimshow\u001b[0;34m(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)\u001b[0m\n\u001b[1;32m   5624\u001b[0m                               resample=resample, **kwargs)\n\u001b[1;32m   5625\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5626\u001b[0;31m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5627\u001b[0m         \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_alpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5628\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36mset_data\u001b[0;34m(self, A)\u001b[0m\n\u001b[1;32m    687\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mImage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m                 \u001b[0mA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpil_to_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Needed e.g. to apply png palette.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 689\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_A\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msafe_masked_invalid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m         if (self._A.dtype != np.uint8 and\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py\u001b[0m in \u001b[0;36msafe_masked_invalid\u001b[0;34m(x, copy)\u001b[0m\n\u001b[1;32m    704\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    705\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0msafe_masked_invalid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 706\u001b[0;31m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubok\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    707\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnative\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    708\u001b[0m         \u001b[0;31m# Note that the argument to `byteswap` is 'inplace',\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not broadcast input array from shape (20,150,150,3) into shape (20,)"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# from PIL import Image\n","import pandas as pd\n","from tensorflow.keras.preprocessing import image\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\n","def printmd(string):\n","    # Print with Markdowns    \n","    display(Markdown(string))\n","class_dictionary = {'brown avocado' : 0, \n","                    'bright green avocado': 1}\n","IMAGE_SIZE    = (224, 224)\n","number_1 = int(input(\"번호를 입력하세요 : \")) # 10, 50, 100\n","test_image = image.load_img(test_genorator.iloc[number_1, 0]\n","                            ,target_size =IMAGE_SIZE )\n","test_image = image.img_to_array(test_image)\n","plt.imshow(test_image/255.);\n","\n","test_image = test_image.reshape((1, test_image.shape[0], test_image.shape[1], test_image.shape[2]))\n","test_image = preprocess_input(test_image)\n","\n","df = pd.DataFrame({'pred':prediction[0]})\n","df = df.sort_values(by='pred', ascending=False, na_position='first')\n","\n","for x in class_dictionary:\n","  if class_dictionary[x] == (df[df == df.iloc[0]].index[0]):\n","    printmd(f\"### Class prediction = {x}\")\n","    break"],"metadata":{"id":"1W_Rj0bNLR7m"},"execution_count":null,"outputs":[]}]}